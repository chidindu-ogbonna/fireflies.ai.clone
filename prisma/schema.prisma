generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  password      String? // Add this for email/password auth
  accounts      Account[]
  sessions      Session[]
  meetings      Meeting[]
  DeepgramKey   DeepgramKey[]
}

model Meeting {
  id          String   @id @default(cuid())
  title       String   @default("Untitled Meeting")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  summary     String?  @db.Text
  actionItems String?  @db.Text
  videoUrl    String?  @db.Text
  duration    Int?

  userId        String
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  transcription String? @db.Text
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model DeepgramKey {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  externalId String   @unique
  key        String   @unique
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, key])
}
